class Solution:

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.nums = nums
        self.nums1 = [0] * len(nums)
        self.nums2 = list(nums)
    def reGenerateComp(self,lft):
        i = len(self.nums) - 1
        while i >= lft:
            if self.nums1[i] != 0:
                tmp = self.nums[i]
                self.nums[i] = self.nums[self.nums1[i]+i]
                self.nums[self.nums1[i]+i] = tmp
            i -= 1
        
    def reset(self):
        """
        Resets the array to its original configuration and return it.
        :rtype: List[int]
        """
        return self.nums2
    def shiftStep(self):
        rght = len(self.nums) - 2
        while rght >= 0:
            if self.nums1[rght] < (len(self.nums) - rght-1):
                self.reGenerateComp(rght)
                self.nums1[rght] += 1
                tmp = self.nums[rght]
                self.nums[rght] = self.nums[self.nums1[rght]+rght]
                self.nums[self.nums1[rght]+rght] = tmp
                for j in range(rght+1,len(self.nums)):
                    self.nums1[j] = 0
                return
            else:
                rght -= 1
        self.reGenerateComp(0)
        for i in range(len(self.nums1)):
            self.nums1[i] = 0
    def shuffle(self):
        """
        Returns a random shuffling of the array.
        :rtype: List[int]
        """
        self.shiftStep()
        return self.nums
